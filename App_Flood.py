# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKO6ssNvdXtAF2r_z3tW2cCtI95TEHHC
"""

# flood_dashboard.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.preprocessing import StandardScaler

# Load model yang sudah disimpan sebelumnya
reg_model = joblib.load('flood_probability_regressor.pkl')
clf_model = joblib.load('flood_risk_classifier.pkl')
kmeans_model = joblib.load('kmeans_model.pkl')
scaler = joblib.load('scaler.pkl')

# Feature list
selected_features = [
    'MonsoonIntensity', 'TopographyDrainage', 'Deforestation',
    'Urbanization', 'Encroachments', 'DrainageSystems',
    'CoastalVulnerability', 'Landslides', 'Watersheds',
    'PopulationScore', 'WetlandLoss'
]

# Dummy dataframe (replace with your original flood.csv if needed)
df = pd.read_csv('flood.csv')

# Sidebar navigation
st.sidebar.title("Flood Risk Dashboard")
page = st.sidebar.radio("Go to", ["Deskripsi", "Visualisasi Data", "Prediksi Risiko Banjir", "Evaluasi Model"])

# Page 1: Deskripsi
if page == "Deskripsi":
    st.title("üìñ Deskripsi Dataset & Tujuan Aplikasi")
    st.markdown("""
    **Dataset:**
    Dataset ini berisi faktor-faktor yang memengaruhi risiko banjir di berbagai daerah.

    **Fitur:**
    - MonsoonIntensity
    - TopographyDrainage
    - Deforestation
    - Urbanization
    - Encroachments
    - DrainageSystems
    - CoastalVulnerability
    - Landslides
    - Watersheds
    - PopulationScore
    - WetlandLoss

    **Target:**
    - FloodProbability

    **Tujuan Aplikasi:**
    - Memvisualisasikan data faktor risiko banjir
    - Memprediksi probabilitas banjir dan klasifikasi risiko banjir
    - Menyediakan insight bagi perencanaan penanggulangan banjir
    """)

# Page 2: Visualisasi Data
elif page == "Visualisasi Data":
    st.title("üìä Visualisasi Data")

    # Korelasi antar fitur
    st.subheader("Correlation Matrix")
    plt.figure(figsize=(12, 10))
    corr_matrix = df[selected_features + ['FloodProbability']].corr()
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
    st.pyplot(plt)

    # Histogram FloodProbability
    st.subheader("Distribusi Flood Probability")
    plt.figure(figsize=(8, 6))
    sns.histplot(df['FloodProbability'], bins=30, kde=True)
    st.pyplot(plt)

# Page 3: Prediksi Risiko Banjir
elif page == "Prediksi Risiko Banjir":
    st.title("üöÄ Prediksi Risiko Banjir")

    st.subheader("Masukkan nilai fitur:")
    input_data = {}
    for feature in selected_features:
        input_data[feature] = st.slider(f"{feature}", float(df[feature].min()), float(df[feature].max()), float(df[feature].mean()))

    # Convert to dataframe
    input_df = pd.DataFrame([input_data])

    # Scaling
    X_input_scaled = scaler.transform(input_df)

    # Predict regression
    flood_prob_pred = reg_model.predict(X_input_scaled)[0]

    # Predict classification
    flood_risk_class_pred = clf_model.predict(X_input_scaled)[0]

    # Label risk class
    risk_labels = ['Low', 'Medium', 'High']
    risk_pred_label = risk_labels[flood_risk_class_pred]

    st.subheader("Hasil Prediksi:")
    st.write(f"**Probabilitas Banjir:** {flood_prob_pred:.2f}")
    st.write(f"**Kategori Risiko:** {risk_pred_label}")

# Page 4: Evaluasi Model
elif page == "Evaluasi Model":
    st.title("üìà Evaluasi Model")

    # Dummy metrics ‚Üí masukkan hasil evaluasi dari training kamu
    st.subheader("Regression Model (FloodProbability Prediction):")
    st.write("Mean Squared Error (MSE): 0.0123")
    st.write("R¬≤ Score: 0.89")

    st.subheader("Classification Model (FloodRisk Category):")
    st.write("Accuracy: 85%")
    st.write("Precision / Recall / F1-score ‚Üí lihat laporan training")

    # Feature importance
    st.subheader("Feature Importance (FloodProbability Regression):")
    importances = reg_model.feature_importances_

    feat_imp_df = pd.DataFrame({
        'Feature': selected_features,
        'Importance': importances
    }).sort_values(by='Importance', ascending=False)

    st.dataframe(feat_imp_df)

    plt.figure(figsize=(10, 6))
    sns.barplot(x='Importance', y='Feature', data=feat_imp_df)
    st.pyplot(plt)

# Page 5: Clustering Daerah
elif page == "Clustering Daerah":
    st.title("üîç Clustering Daerah Berdasarkan Faktor Risiko Banjir")

    # Scaling data
    X_scaled = scaler.transform(df[selected_features])

    # Predict cluster untuk seluruh dataset
    cluster_labels = kmeans_model.predict(X_scaled)

    # Tambahkan ke dataframe
    df['FloodRiskCluster'] = cluster_labels

    # Visualisasi PCA 2D
    from sklearn.decomposition import PCA

    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_scaled)

    st.subheader("Visualisasi Cluster (PCA 2D)")

    import matplotlib.pyplot as plt
    import seaborn as sns

    plt.figure(figsize=(10, 6))
    sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=df['FloodRiskCluster'], palette='Set2', s=100)
    plt.title('Clustering Daerah (PCA 2D)')
    plt.xlabel('PCA 1')
    plt.ylabel('PCA 2')
    st.pyplot(plt)

    # Tampilkan dataframe dengan cluster
    st.subheader("Daftar Daerah dengan Cluster")
    st.dataframe(df[selected_features + ['FloodProbability', 'FloodRiskCluster']].head(20))  # tampilkan 20 teratas

    # Profil per cluster
    st.subheader("Profil Rata-rata per Cluster")
    cluster_profile = df.groupby('FloodRiskCluster')[selected_features + ['FloodProbability']].mean()
    st.dataframe(cluster_profile)